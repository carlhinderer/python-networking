-----------------------------------------------------------
CHAPTER 1 - NETWORK PROGRAMMING WITH PYTHON
-----------------------------------------------------------

- TCP/IP Protocol Stack

    4. Application Layer 

         - This layer manages the high-level protocols, including representation, coding, and dialogue
             control issues.  It handles everything related to applications, and the data is packed
             appropriately for the next layer.

         - It is a user process that cooperates with other processes on the same host or a different one.

         - Examples include TELNET, FTP, and SMTP


    3. Transport Layer

         - This layer handles QoS, reliability, flow control, and error correction.  It provides data 
             transfer.

         - TCP is connection-oriented and provides reliable network communications.  UDP is not
             connection-oriented.


    2. Network Layer

         - The internet layer's purpose is to send packets from the source of any network and make them
             reach their destination, regardless of the route they take to get there.

         - The IP is the most important protocol of the network layer.  It is non-connection-oriented.  The
             message unit in an IP network is called an IP datagram.


    1. Network Access Layer

         - Also called the 'host-to-host', 'link', or 'data link' layer, it is the interface to network
             hardware.

         - Includes the LAN and WAN protocols, and the details included in the physical and data link
             layers in the OSI model.



- OSI Model Stack

    [Host Layers]

    7. Application = High-level APIs, including resource sharing and remote file access.
                     (Protocol Data Unit = Data)

    6. Presentation = Translation of data between a networking service and an application, including 
                        character encoding, data compression, and encrpytion/decryption.
                        (Protocol Data Unit = Data)

    5. Session = Managing communication sessions (ie continuous exchange of information in the form of
                   back and forth transmissions between 2 nodes)
                   (Protocol Data Unit = Data)

    4. Transport = Reliable transmission of data segments between points on a network, including 
                     segmentation, acknowledgement, and multiplexing
                     (Protocol Data Unit = Segment, Datagram)

    [Media Layers]

    3. Network = Structuring and managing a multi-node network, including addressing, routing, and
                   traffic control.
                   (Protocol Data Unit = Packet)

    2. Data Link = Reliable transmission of data frames between 2 nodes connected by a physical layer.
                   (Protocol Data Unit = Frame)

    1. Physical = Transmission and reception of raw bit streams over a physical medium.
                  (Protocol Data Unit = Symbol)



- UDP

    - UDP is a non-connection-oriented protocol.  This means that when 'MachineA' sends packets to 
        'MachineB', the flow is unidirectional.  The data transfer is made without warning the recipient,
        and the recipient receives the data without sending a confirmation to the sender.


    - This is because the data that's sent by the UDP protocol does not allow you to transfer information
        related to the sender.  Therefore, the recipient will not know about the sender's data, except
        their IP address.


    - UDP is:

        1. Unreliable = There is no concept of packet retransmission.  Therefore, when a UDP packet is sent,
             it is not possible to know whether the packet has reached its destination.

        2. Not ordered = The order in which the packets are sent and received cannot be determined.

        3. Datagrams = The integrity of packet deliver is done individually and can only be checked to
             ensure packages arrived correctly.

        4. Lightweight and fast = Is used when speed is an important factor.



- TCP

    - TCP is connection-oriented.  When 'MachineA' sends data to 'MachineB', the recipient is informed
        of the arrival of this data and confirms its good reception.


    - Here, the CRC control of data intervenes, which is based on a mathematical equation that allows 
        you to verify the integrity of the transmitted data.  In this way, if the received data is 
        corrupted, TCP allows the recipients to request the sender to send them again.


    - When data is provided to the IP protocol, it binds it in IP datagrams, fixing the 'field protocol'
        with 6, so you know in advance the protocol is TCP.


    - TCP is:

        1. Reliable = Has the ability to manage the attempts that can be made to send a message if a 
             packet is lost, and can resend those fragments that were not sent on the first attempt.

        2. Ordered = The messages are delivered in a particular order.

        3. Heavyweight = Has the ability to verify that the connection can be established through a 
            socket before any packet can be sent.  To do this, it uses 3 sending confirmation packets,
            called 'SYN', 'SYN-ACK', and 'ACK'.



- IP Addresses and Ports

    - IP Addresses are addresses that help to uniquely identify a device over the internet.  A port is
        an endpoint for communication in an operating system.


    - When you connect to the internet, your device is assigned a public IP address, and each website
        you visit also has a public IP address.

        Total IPv4 Space: ~4.2 billion addresses
        Total IPv6 Space: ~3.4 * 10^38 addresses


    - Ports are values (0 - 65,535) used to identify the processes that are communicating.  At each end,
        each process that intervenes in the communication process uses a single port to send and
        receive data.


    - Common Ports:

        22:  SSH
        23:  Telnet
        25:  SMTP
        53:  DNS
        80:  HTTP
        443: HTTPS


    - A private IP address is used for an internal network of an organization.  They range from:

        10.0.0.0 - 10.255.255.255
        172.16.0.0 - 172.31.255.255
        192.168.0.0 - 192.168.255.255


    - A public IP address is an IP address that your home or business router receives from your ISP.



- Network Interfaces

    - To find out which IP addresses have been assigned to your computer:

        $ ip addr


    - Every device has a virtual interface called the loopback address, which is listed as 'interface 1'.
        The interface doesn't actually connect to anything outside of the device, and only the device
        itself can communicate with it.  It's useful for local network application testing, and can
        also be used as a means of interprocess communication.  It is almost always assigned to 
        '127.0.0.1', and is known as 'localhost'.



- DHCP

    - IP addresses can be assigned to a device by a network administrator in 2 ways:

        1. Statically, where the device's OS is manually configured with the IP address

        2. Dynamically, where the device's OS is configured using DHCP


    - When using DHCP, as soon as the device first connects to a network, it is automatically allocated
        an address by a DHCP server from a predefined pool.  Some network devices, like home broadband
        routers, provide a DHCP server out of the box.  Otherwise, a DHCP server must be set up by a 
        network administrator.


    - DHCP environments require a DHCP server that's been configured with the appropriate parameters for
        the proposed networks, such as the pool of available IP addresses, subnet masks, and the 
        gateway and server name addresses.


    - A DHCP server dynamically allocates IP addresses instead of having to depend on the static IP
        address and is responsible for assigning, leasing, reallocating, and renewing IP addresses.


    - When a computer in a network wants to obtain a valid network configuration (usually when starting
        up the machine), it issues a 'DHCP Discover' request.  When this request (usually made through
        a UDP broadcast packet) reaches a DHCP server, a negotiation is established where the server 
        grants the use of an IP to a client for a certain time.


    - To make a DHCP request, the 'dhclient' command is used:

        $ dhclient --help



- DNS

    - DNS allows for the association of domain names with IP addresses.  DNS is a distributed and
        hierarchical database.  


    - The DNS service is a pillar of the network, so its availability must be absolute.  To achieve this,
        redundant servers and extensive caching are used.


    - The 'nslookup' tool is used to query DNS from the command line.

        $ nslookup packtpub.com


    - When we type a domain address into a web browser, DNS is automatically translating the domain name
        into an IP address in the background.



- NAT

    - NAT is a mechanism that makes the traffic from a private network appear to be coming from a single
        public address.  Thanks to this patch, large companies can use one public IP address instead of
        one address for each machine on the network.  It is also used to connect home networks to the
        internet.


    - There are 2 types of operations with NAT:

        1. Static = A private IP address is always translated into the same public IP address.  This mode
             of operation would allow a host within the network to be visible from the internet.

        2. Dynamic = The router is assigned several public IP addresses so that each private IP address
             is mapped using one of the public IP addresses that the router has assigned.  This is done
             so that each private IP address corresponds to at least one public IP address.


    - Each time a host requires an internet connection, the router will assign a public IP address that
        is not being used.  This increases security, since it is difficult for an external host to 
        enter the network since public addresses are always changing.



- IPv4

    - IPv4 addresses are 32 bits in length.  This limits the space to ~4.3 billion addresses.  


    - IPv4 addresses are divided into 5 classes:

        Class A = 1.0.0.0   - 126.255.255.255

        Class B = 128.0.0.0 - 191.255.255.255

        Class C = 192.0.0.0 - 223.255.255.255

        Class D = 224.0.0.0 - 239.255.255.255

        Class E = 240.0.0.0 - 254.255.255.255


    - By definition, Class D and E addresses cannot be used as source addresses.


    - Special addresses include:

        0.x.x.x            = The identifier of all IPv4 networks (only valid as source address)

        127.x.x.x          = Identifies physical loopbacks in network equipment

        255.255.255.255    = Limited broadcast destination address



- IPv6

    - IPv6 addresses are 128 bits (8 groups of 4 hex digits / 16 bits)

        fe80::e53f: e43b: ad07: 9cab



- Sockets

    - The 'socket' module is Python's standard interface for the transport layer.  It provides functions
        for interacting with TCP and UDP, as well as for looking up hostnames through DNS.  It is the
        low-level networking interface for Python.


    - A socket is defined by the IP address of the machine, the port on which it listens, and the protocol
        it uses.  


    - Sockets are classified into TCP stream sockets ('socket.SOCK_STREAM') or UDP datagram sockets
        ('socket.SOCK_DGRAM').  


    - Sockets can also be classified according to their family.  We have Unix sockets ('socket.AF_UNIX')
        which are bound to file system nodes, IPv4 sockets ('socket.AF_INET'), and IPv6 sockets
        ('socket.AF_INET6'), among other specialized types.


    - To create a socket, the 'socket.socket()' constructor is used, which can take the family, type,
        and protocol as optional parameters.

        # Create a new socket
        >>> my_socket = socket.socket(socket_family, socket_type, protocol=0)

        socket_family: Either 'AF_UNIX' or 'AF_INET' ('AF_INET' is default)
        socket_type:   Either 'SOCK_STREAM' or 'SOCK_DGRAM' ('SOCK_STREAM' is default)
        protocol:      Usually omitted, defaults to 0



- Client Socket Methods

    - To connect to a remote socket in one direction, we can use the 'connect()' method by passing in
        the host and port.


    - Example:

        # Create the socket
        >>> import socket
        >>> client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

        # Connect to the web server on port 80
        >>> client_socket.connect(("www.packtpub.com", 80))



- Server Socket Methods

    - The 'bind()' method allows us to define on which port our server will be listening to communications.


    - The 'listen(backlog)' method makes the socket start listening for connections.


    - The 'accept()' methods is used for accepting a connection.


    - Example:

        >>> import socket

        # Create the socket
        >>> server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

        # Bind the socket to localhost on port 80
        >>> server_socket.bind(('localhost', 80))

        # Become a server socket and listen to a maximum of 10 connections
        >>> server_socket.listen(10)



- Example - Using 'urllib' To Download RFC Documents

    - The 'urllib' and 'requests' modules are commonly used to make HTTP requests.  In this example, we
        use 'urllib' to download an RFC whose number is specified on the command line.


    - Full Script 'RFC_download_urllib.py'

        #!/usr/bin/env python3

        import sys, urllib.request
        try:
            rfc_number = int(sys.argv[1])
        except (IndexError, ValueError):
            print('Must supply an RFC number as first argument.')
            sys.exit(2)

        template = 'http://www.rfc-editor.org/rfc/rfc{}.txt'
        url = template.format(rfc_number)

        rfc_raw = urllib.request.urlopen(url).read()
        rfc = rfc_raw.decode()
        print(rfc)


    - To run the script:

        $ python RFC_download_urllib.py 2324