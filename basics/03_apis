-----------------------------------------------------------
CHAPTER 3 - APIs
-----------------------------------------------------------

- Encoding and Decoding with the 'json' Module

    - Encoding a Python list

        >>> import json
        >>> books = ['book1', 'book2', 'book3']

        # Creates a string
        >>> json.dumps(books)
        '["book1", "book2", "book3"]'


    - Decoding a Json string

        >>> books = '["book1", "book2", "book3"]'

        # Creates a Python list
        >>> book_list = json.loads(books)
        >>> book_list
        ['book1', 'book2', 'book3']


    - Loading from a Json file

        >>> with open('books.json', 'rt') as file:
                books = json.load(file)

        >>> print(books)



- Python dicts with json

    - Python dicts can also be converted to/from json.

        >>> import json

        # Convert from dict to json string
        >>> books = {'A': 'Book1', 'B': 'Book2', 'C': 'Book3'}
        >>> books_json = json.dumps(books)

        # Convert from json string to dict
        >>> books_dict = json.loads(books_json)



- Interacting with the Twitter API

    - The Twitter API provides access to all the functions we may want a Twitter client to perform.  With
        the Twitter API, we can create clients that search for recent tweets, find out what's trending,
        look up user details, follow user's timelines, and even act on behalf of users.


    - The Twitter module is based on the REST API at:

        https://developer.twitter.com/en/docs/tweets/search/api-reference.html

      We can install the module with pip:

        pip install twitter


    - Next, we need to register our application to our Twitter account.  Once we do that, we need to get
        a 'Consumer Key' and an 'Access Secret'.



- Authenticating Requests with OAuth

    - Twitter uses the OAuth v2 authentication standard.  OAuth credentials comprise of 2 main elements,
        consumer and access.  The 'consumer' element identifies our application and the 'access' element
        proves that the account the access credentials came from authorized our app to act on its behalf.
        Twitter lets us acquire the access credentials directly from the 'developer.twitter.com'
        interface.


    - The 'OAuthLib' library allows authentication to a server using the OAuth protocol.  Sites like 
        Facebook, Twitter, LinkedIn, GitHub, and Google use this protocol.  To integrate with OAuth,
        we'll use the Python 'requests-oauthlib' module.



- Connecting to the Twitter API

    - First, we need to provide a 'credentials.txt' file, in which we specify the keys we received from
        the Twitter app configuration.

        # File: credentials.txt
        # Fill in your access tokens
        # Get credentials here: https://apps.twitter.com
        # Line 1: CONSUMER_KEY
        # Line 2: CONSUMER_SECRET
        # Line 3: OAUTH_TOKEN
        # Line 4: OAUTH_TOKEN_SECRET


    - Here, we use the credentials specified in our 'credentials.txt'.

        !/usr/bin/python3

        import requests, requests_oauthlib, sys

        def init_auth(file):
            lines = open(file,'r').read().splitlines()
            (CONSUMER_KEY, CONSUMER_SECRET, OAUTH_TOKEN, OAUTH_TOKEN_SECRET) = lines
            auth_obj = requests_oauthlib.OAuth1(CONSUMER_KEY, CONSUMER_SECRET,
                                                OAUTH_TOKEN, OAUTH_TOKEN_SECRET)
            if verify_credentials(auth_obj):
                print('Validated credentials OK')
                return auth_obj
            else:
                print('Credentials validation failed')
                sys.exit(1)
        
        def verify_credentials(auth_obj):
            url = 'https://api.twitter.com/1.1/account/verify_credentials.json'
            response = requests.get(url, auth=auth_obj)
            return response.status_code == 200
        
        if __name__ == '__main__':
            auth_obj = init_auth('credentials.txt')



- Retrieving Tweets from a Timeline

    - We can now add a 'get_mentions()' function for checking and retrieving new tweets from our mentions
        timeline.  

        def get_mentions(since_id, auth_obj):
            params = {'count': 200, 'since_id': since_id, 'include_rts': 0, 'include_entities': 'false'}
            url = 'https://api.twitter.com/1.1/statuses/mentions_timeline.json'
            response = requests.get(url, params=params, auth=auth_obj)
            # Checking if the request is successful.
            # It will raise an HTTPError if the request returned an unsuccessful status code.
            response.raise_for_status()
            return json.loads(response.text)

        if __name__ == '__main__':
            auth_obj = init_auth('credentials.txt')
            since_id = 1
            for tweet in get_mentions(since_id, auth_obj):
                print(tweet['text'])


    - Here, we use the 'statuses/mentions_timeline.json' endpoint to check for and download any tweets
        that mention our app account.  We specify a number of parameters, which 'Requests' passes on
        as a query string.

        'count' = maximum number of tweets that will be returned

        'include_entities' = used for trimming down some extraneous information from the tweets retrieved

        'include_rts' = whether to include retweets

        'since_id' = only retrieve tweets with ids above this value (each tweet has a integer id, with
                       later tweets having higher values than earlier tweets)