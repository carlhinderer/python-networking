-----------------------------------------------------------------------
|  PART 1 - SECURITY BASICS                                           |
-----------------------------------------------------------------------

- Let's Meet Some Nice People

    Bob                    Alice
    ------------        ----------------
    -A-> hello             hello
         ALICE             ALICE
           |                 ^
           V                 |
      x0Ak3o$2Rj  -->   x0Ak3o$2Rj  <-A-


- People with Bad Intent

    - Carol, Carlos or Charlie, as a third participant in communications.

    - Chuck, as a third participant usually of malicious intent

    - Dan or Dave, a fourth participant

    - Eve, an eavesdropper, is usually a passive attacker. While she can listen in on 
        messages between Alice and Bob, she cannot modify them.


- Paranoia

    - Who is out to get you?

    - If you are interesting or influential people want to get into your personal info.

    - If you are normal, folks want to use your resources or take your information to 
        make money...

    - Usually no one cares...  But it is safest to assume some is always trying...


- Security is always a Tradeoff

    - "Perfect security" is unachievable - Must find the right tradeoff

    - Security versus Cost

    - Security versus Convenience (See also, "profit")

    - "More" is not always better – vendors of products will try to convince you that you 
        *cannot live* without their particular gadget


- Terminology

    - Confidentiality
        - Prevent unauthorized viewing of private information

    - Integrity
        - Information is from who you think it is from and has not been modified since it 
            was sent





-----------------------------------------------------------------------
|  PART 2 - ENCRYPTION & CONFIDENTIALITY                              |
-----------------------------------------------------------------------

- Terminology

    - Plaintext is a message that will be put into secret form.

    - Ciphertext is a transformed version of plaintext that is unintelligible to anyone 
        without the means to decryptTerminology

    - The transformation of plaintext to ciphertext is referred to as encryption.

    - Returning the ciphertext back to plaintext is referred to as decryption.

    - The strength of a cryptosystem is determined by the encryption and decryption 
        techniques and the length of the key.


- Two Kinds of Systems

    - Two basic types of cryptosystems exist, secret-key and public-key.

    - In a secret-key scheme, the key used for encryption must be the same key used for 
        decryption.  Also called symmetric-key cryptosystem.

    - Secret-key cryptosystems have the problem of secure key distribution to all parties 
        using the cryptosystem.


- Secret-Key Scheme


      Plaintext:           c = d           Plaintext:
      "candy"              a = b           "candy"
                           n = o
      Encrypt              d = e           Decrypt
                           y = z

      CipherText:      Message Might       CipherText:
      "dboez"          Be Intercepted      "dboez"

      Alice                 Eve              Bob



- Caesar Cipher

    - Caesar cipher is one of the simplest and most widely known encryption techniques. 

    - It is a type of substitution cipher in which each letter in the plaintext is 
        replaced by a letter some fixed number of positions down the alphabet.

        A B C
        | | |
        V V V    shift of 3
        D E F


- Example - Break the Code 1

    CipherText: "upbtu"

    Strategy:
      - Use the decoder ring.
      - For each number 1..26, see if when you decrypt the message with that shift, it 
          makes sense.

    PlainText: "toast" (Shift of 1)


- Example - Break the Code 2

    CipherText: "Uryyb, zl anzr vf Puhpx naq V arrq zbarl naq n wrg."

    Strategy:
      - We know the message is in English.
      - We use the 'V' -> 'I' and 'n' -> a to get the shift of 13.

    PlainText: "Hello, my name is Chuck and I need money and a jet."





-----------------------------------------------------------------------
|  PART 3 - INTEGRITY & SIGNATURES                                    |
-----------------------------------------------------------------------

- Cryptographic Hashes

    - A cryptographic hash function is a function that takes an arbitrary block of data 
        and returns a fixed-size bit string, the (cryptographic) hash value, such that 
        an accidental or intentional change to the data will change the hash value. 

    - The data to be encoded is often called the "message," and the hash value is sometimes 
        called the message digest or simply digest.


        Input                Cryptographic          Digest
        -----------  ---->   Hash           ---->   -----------------
        Fox                  Function               DFCD 3454 BREA 789A 751A
                                                    686C 24D9 9081 E6EE FB45


    - Remember that unlike encryption/decryption, hashing is a one-way function and cannot be
        reversed.


- Hashes for Passwords

    - As a general rule, systems do not store your password in plain text their 
        databases in case they 'lose' their data

    - When you set the password, they compute a hash and store the hash

    - When you try to log in they compute the hash of what you type as a password and if 
        it matches what they have stored - they let you in.

    - This is why a respectable system will never send your PW to you - they can only 
        reset it!


- Password Hashing Example

    [Setting a new password]

      fluffy       SHA-1       d9d71ab718931a89de1e986bc62f6c988ddc1813

    [Log in attempt]

      pony         SHA-1       2629fb6d2384da89796a4811ef6db5f2ac657bab     Doesn't Match
      fluffy       SHA-1       d9d71ab718931a89de1e986bc62f6c988ddc1813     Match


- Message Integrity

    - When you get a message from someone, did that message really come from who you think 
        it came from?

    - Was the message altered while in transit or is the copy you received the same as the 
        copy that was sent?

                         You
        [Insecure        --------------------------- 
         Medium]   --->  "Eat More Ovaltine--Annie"

      How might we be very sure this message really came from Annie and it was not altered 
        enroute?


- Simple Message Signing

    - Shared secret transported securely 'out of band'

    - Before sending the message, concatenate the secret to the message

    - Compute the SHA digest of the message+secret

    - Send message + digest across insecure transport


- Receiving a Signed Message

    - Receive message + digest from insecure transport

    - Remove digest and add secret

    - Compute SHA digest for message + secret

    - Compare the computed digest to the received digest


- Message Signing Example

    1. The secret is 'Santa'.
       The message is 'Eat More Ovaltine'

       We concatenate the secret to the message, Compute the SHA digest of the 
         message+secret, and send message + digest.


         Eat More Ovaltine
         Eat More OvaltineSanta  --->  SHA-1  --->  a79540

       We send

         Eat More Ovaltinea79540


    2. We receive the string and split the digest off.

         Eat More Ovaltine    a79540

       We take the message, concatenate the shared secret, and get the digest.

         Eat More OvaltineSanta  -->  SHA-1  -->  a79540

       Since the received and local digests match, we can be sure the message is genuine.
         If they do not match, we cannot trust the message.



- Secret Key Shortcomings 

    - Every pair of people/systems needs a secret key

    - In the Internet, key distribution cannot be via the Internet because communications 
        are insecure until you get the key!

    - For the Internet to work we need an approach where keys can cross the insecure 
        Internet and be intercepted without compromising security





-----------------------------------------------------------------------
|  PART 4 - PUBLIC/PRIVATE KEYS & SECURE SOCKETS                      |
-----------------------------------------------------------------------

- Public Key Encryption

    - Proposed by Whitfield Diffie and Martin Hellman in 1976

    - Public-key cryptosystems rely on two keys which are mathematically related to one 
        another.  Also called asymmetric-key cryptosystem.

    - One key is called the public key and is to be openly revealed to all interested 
        parties.

    - The second key is called the private key and must be kept secret.


- Public Key

    - A message encrypted with one of the keys can only be decrypted with the other key.

    - It is computationally infeasible to recover one key from the other

    - Public-key cryptosystems solve the problem of secure key distribution because the 
        public key can be openly revealed to anyone without weakening the cryptosystem.


- Generating Public/Private Pairs

    - Choose 2 large random prime numbers

    - Multiply them

    - Compute public and private keys from that very large number


        Large Random Number
                |
                V
        Key Generation Program
                /\
               /  \
              /    \
          Public  Private


- Public Key Math (Light)

    - What are the factors of 55,124,159 (a nearly prime number)?
        - Hard

    - What do you multiply 7919 by to get 55,124,159?
        - Easy -> 6961


- Key Exchange Example

    1. I send a request to amazon.com, which initiates secure communication

    2. Amazon.com sends me their public key

    3. I send a message to amazon.com, which I encrypt using their public key
          Plaintext: "Visa928"
              |
              |  Encrypt with Public Key
              V
          Ciphertext:"ablghyuip"

    4. Amazon uses their private key to decrpyt the message.

         Ciphertext:"ablghyuip"
              |
              |  Decrypt with Private Key
              V
         Plaintext: "Visa928"



- TCP with SSL

    - TCP connections are sometimes called 'sockets'.  When 'Secure Sockets Layer' is used,
        encryption is implemented in the Transport Layer, and applications can just use it
        transparently.

        APPLICATION LAYER

        SECURE SOCKETS LAYER
        TRANSPORT LAYER

        INTERNET LAYER


- Transport Layer Security (TLS)

    - Used to be called “Secure Sockets Layer”  (SSL)

    - Can view it as an extra layer “between” TCP and the application layer

    - It is very difficult but not impossible to break this security - normal people do not 
        have the necessary compute resources to break TLS

    - Encrypting and decryption takes resources - so we use it for things when it is needed

    - The IP and TCP are unaware whether data has been encrypted


- Secure Application Protocols

    - There are often secure and unencrypted application protocols

        http://www.facebook.com
        https://www.facebook.com

    - Your browser tells you when using a secure connection - you should never type 
        passwords into a non-secure connection

    - Especially over wireless - especially at a security conference...





-----------------------------------------------------------------------
|  PART 5 - INTEGRITY & CERTIFICATE AUTHORITIES                       |
-----------------------------------------------------------------------

- Digital Certificates

    - In cryptography,  a  public key certificate (also known as a 'digital certificate'
        or 'identity certificate') is an electronic document which uses a digital signature 
        to bind a public key with an identity — information such as the name of a person
        or an organization, their address, and so forth. 

    - The certificate can be used to verify that a public key belongs to an individual.


- Certificate Authority (CA)

    - A certificate authority is an entity that issues digital certificates. 

    - The digital certificate certifies the ownership of a public key by the named subject 
        of the certificate. 

    - A CA is a trusted third party that is trusted by both the owner of the certificate and 
        the party relying upon the certificate.

    - Your browser comes with certificates/public keys from some certificate authorities 
        built in.  Like Verisign.


- Public Key Issues

    - Public-key cryptosystems have the problem of securely associating a public key with an 
        individual

    - I am about to type in my credit card and send it - am I being Phished?

    - The remote server sent me a public key.

    - Should I use it? Is this really Amazon's public key?


- Verisign Example

    1. Verisign has their private key, which they keep secret.

    2. Verisign's public keys are added your trusted CAs by your OS vendor.


    3. Amazon generates a public/private key pair.

    4. Amazon sends their public key to Verisign.
    
    5. Verisign takes Amazon's public key and adds a digest created from Verisign's private key.

        Cert: Amazon
        Digest: Verisign

       Amazon's digital certificate has now been created and signed by Verisign.


    6. Verisign sends the digital certificate back to Amazon.  It says that "I am amazon.com,
         and Verisign is asserting I really am."

    7. Your laptop makes a request to Amazon with an 'https' connection.  Amazon sends you their
         public key.  

       In your laptop, you have the Verisign public key.

    8. You use the Verisign public key to verify that Amazon's public key has been signed.


    9. Now, since we have verified Amazon's public key, we send our data, which we encrypted 
         using their public key.

    10. Amazon gets the message and decrypts it using their private key.